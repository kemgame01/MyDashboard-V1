rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // --- HELPER FUNCTIONS ---
    function isRootAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isRootAdmin == true;
    }
    
    function getUserRole() {
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
        : '';
    }
    function hasRole(role) {
      return getUserRole() == role;
    }
    
    function canManageSales() {
      let role = getUserRole();
      return isRootAdmin() || 
             role == 'admin' || 
             role == 'manager' || 
             role == 'sales';
    }
    function canManageInventory() {
      let role = getUserRole();
      return isRootAdmin() || 
             role == 'admin' || 
             role == 'manager';
    }
    
    // --- COLLECTION RULES ---
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || hasRole('admin') || isRootAdmin();
      allow create: if isRootAdmin() || hasRole('admin');
      
      // INVENTORY & TASKS (Subcollections of Users)
      match /inventory/{itemId} {
        allow read, write: if request.auth.uid == userId || canManageInventory();
      }
      match /inventoryHistory/{logId} {
        allow read, create: if request.auth.uid == userId || canManageInventory();
      }
      // Remove old sales rule as sales are now at root level
      match /tasks/{taskId} {
        allow read, write: if request.auth.uid == userId || isRootAdmin();
      }
    }
    
    // --- ROOT LEVEL SALES COLLECTION ---
    match /sales/{saleId} {
      // Allow read if:
      // 1. User is admin/root admin (can see all sales)
      // 2. User has sales/manager role
      // 3. User is the owner of the sale (userId field matches)
      allow read: if canManageSales() || 
                     (request.auth != null && resource.data.userId == request.auth.uid);
      
      // Allow create if authenticated and has permission to manage sales
      allow create: if request.auth != null && 
                       (canManageSales() || hasRole('staff'));
      
      // Allow update/delete if:
      // 1. User is admin/root admin
      // 2. User has manager role
      // 3. User owns the sale
      allow update, delete: if isRootAdmin() || 
                              hasRole('admin') || 
                              hasRole('manager') ||
                              (request.auth != null && resource.data.userId == request.auth.uid);
    }
    
    // --- CUSTOMERS: THIS IS THE FIX ---
    // This simplified rule securely covers all cases for reading, writing, and listing.
    match /users/{userId}/customers/{customerId} {
      allow read, write, list: if request.auth.uid == userId || hasRole('admin') || isRootAdmin();
    }
    
    // Collection group query for customers (admin dashboard)
    match /{path=**}/customers/{customerId} {
      allow read: if hasRole('admin') || isRootAdmin();
    }
    
    // GLOBAL COLLECTIONS
    match /shops/{shopId} {
      allow read: if request.auth != null;
      allow write: if isRootAdmin() || hasRole('admin');
    }
    match /brands/{brandId} {
      allow read: if request.auth != null;
      allow write: if isRootAdmin() || hasRole('admin');
    }
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if isRootAdmin() || hasRole('admin');
    }
    match /trackingCompanies/{companyId} {
      allow read: if request.auth != null;
      allow write: if isRootAdmin() || hasRole('admin');
    }
    
    // AUDIT LOGS & INVITES
    match /auditLogs/{logId} {
      allow read, write: if hasRole('admin') || isRootAdmin();
    }
    match /invites/{inviteId} {
      allow read, write: if hasRole('admin') || isRootAdmin();
    }
  }
}